#!/bin/bash

# SBOM-Based Container Security Scanner Comparison Script
# Generates SBOMs with Syft, then scans them with Trivy and Grype
# Shows ALL severities including unfixed vulnerabilities
# --use-existing flag to skip SBOM generation and use existing SBOMs
# Author: Security Analysis Script
# Date: $(date +%Y-%m-%d)

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
IMAGES=("alpine:3.18" "cgr.dev/chainguard/wolfi-base:latest" "debian:latest" "ubuntu:22.04")
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
OUTPUT_BASE_DIR="sbom_scanner_results"
OUTPUT_DIR="$OUTPUT_BASE_DIR/$TIMESTAMP"
SBOM_DIR="syft-sboms"  # Separate directory in current folder
TRIVY_FORMAT="json"
GRYPE_FORMAT="json"
SBOM_FORMAT="spdx-json"  # Using SPDX format as it's widely supported
USE_EXISTING=false  # Flag for using existing SBOMs

# Parse command line arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --use-existing)
                USE_EXISTING=true
                echo -e "${YELLOW}Using existing SBOMs (skipping generation)${NC}"
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                echo -e "${RED}Unknown option: $1${NC}"
                show_help
                exit 1
                ;;
        esac
    done
}

# Show help information
show_help() {
    cat << EOF
SBOM-Based Container Security Scanner Comparison Script

Usage: $0 [OPTIONS]

OPTIONS:
    --use-existing    Skip SBOM generation and use existing SBOMs from syft-sboms/ directory
                     (Demonstrates speed benefits of SBOM-based scanning)
    -h, --help       Show this help message

EXAMPLES:
    $0                    # Generate new SBOMs and scan them
    $0 --use-existing     # Use existing SBOMs for fast scanning

The script compares Trivy and Grype vulnerability scanning results using SBOMs
generated by Syft, showing comprehensive vulnerability analysis including unfixed
vulnerabilities across all severity levels.

EOF
}

# Create output directory
mkdir -p "$OUTPUT_DIR"

# Setup SBOM directory - clean and create OR use existing
setup_sbom_directory() {
    if [[ "$USE_EXISTING" == true ]]; then
        echo -e "${YELLOW}Using existing SBOMs (--use-existing flag)...${NC}"
        
        if [[ -d "$SBOM_DIR" ]]; then
            local sbom_count=$(find "$SBOM_DIR" -name "*.spdx.json" -type f | wc -l)
            echo -e "${GREEN}✓ Found $SBOM_DIR directory with $sbom_count SBOM files${NC}"
            
            if [[ $sbom_count -eq 0 ]]; then
                echo -e "${RED}✗ No SBOM files found in $SBOM_DIR directory${NC}"
                echo -e "${YELLOW}Run without --use-existing to generate SBOMs first${NC}"
                exit 1
            fi
        else
            echo -e "${RED}✗ $SBOM_DIR directory not found${NC}"
            echo -e "${YELLOW}Run without --use-existing to generate SBOMs first${NC}"
            exit 1
        fi
    else
        echo -e "${YELLOW}Setting up SBOM directory for generation...${NC}"
        
        if [[ -d "$SBOM_DIR" ]]; then
            echo -e "${CYAN}Existing $SBOM_DIR directory found, cleaning old SBOMs...${NC}"
            rm -rf "$SBOM_DIR"/*
            echo -e "${GREEN}✓ Cleaned existing SBOM directory${NC}"
        else
            echo -e "${CYAN}Creating new $SBOM_DIR directory...${NC}"
            mkdir -p "$SBOM_DIR"
            echo -e "${GREEN}✓ Created SBOM directory${NC}"
        fi
    fi
    echo ""
}

# Find existing SBOM files
find_existing_sboms() {
    declare -gA sbom_files
    echo -e "${YELLOW}Looking for existing SBOM files...${NC}"
    
    for image in "${IMAGES[@]}"; do
        local safe_name=$(echo "$image" | tr '/:' '_')
        local sbom_file="$SBOM_DIR/sbom_${safe_name}.spdx.json"
        local display_name=$(get_display_name "$image")
        
        if [[ -f "$sbom_file" && -r "$sbom_file" ]]; then
            # Verify it's a valid JSON file
            if jq empty "$sbom_file" >/dev/null 2>&1; then
                local package_count=$(jq '.packages | length' "$sbom_file" 2>/dev/null || echo "unknown")
                sbom_files["$image"]="$sbom_file"
                echo -e "${GREEN}✓ Found SBOM for $display_name: $sbom_file ($package_count packages)${NC}"
            else
                echo -e "${RED}✗ Invalid SBOM file for $display_name: $sbom_file (corrupted JSON)${NC}"
            fi
        else
            echo -e "${RED}✗ No SBOM found for $display_name: expected $sbom_file${NC}"
        fi
    done
    
    local found_count=${#sbom_files[@]}
    local total_count=${#IMAGES[@]}
    
    echo ""
    echo -e "${CYAN}Found $found_count/$total_count valid SBOM files${NC}"
    
    if [[ $found_count -eq 0 ]]; then
        echo -e "${RED}No valid SBOM files found. Run without --use-existing to generate SBOMs first.${NC}"
        exit 1
    fi
    
    echo ""
}

# Function to get pretty display name for images
get_display_name() {
    local image=$1
    case "$image" in
        "cgr.dev/chainguard/wolfi-base:latest")
            echo "wolfi:latest"
            ;;
        *)
            echo "$image"
            ;;
    esac
}

echo -e "${BLUE}=== SBOM-Based Container Security Scanner Comparison ===${NC}"
echo -e "${CYAN}Testing images: ${IMAGES[*]}${NC}"
echo -e "${CYAN}Results base directory: $OUTPUT_BASE_DIR${NC}"
echo -e "${CYAN}Current run directory: $OUTPUT_DIR${NC}"
echo -e "${CYAN}SBOM directory: $SBOM_DIR (in current folder)${NC}"
echo -e "${CYAN}SBOM format: $SBOM_FORMAT${NC}"
if [[ "$USE_EXISTING" == true ]]; then
    echo -e "${YELLOW}Mode: Using existing SBOMs (fast scanning demonstration)${NC}"
else
    echo -e "${YELLOW}Mode: Generate new SBOMs and scan${NC}"
fi
echo ""

# Check if scanners and tools are installed
check_dependencies() {
    echo -e "${YELLOW}Checking dependencies...${NC}"
    
    if ! command -v syft &> /dev/null; then
        echo -e "${RED}Error: Syft not found. Please install it first.${NC}"
        echo "Installation: https://github.com/anchore/syft#installation"
        exit 1
    fi
    
    if ! command -v trivy &> /dev/null; then
        echo -e "${RED}Error: Trivy not found. Please install it first.${NC}"
        echo "Installation: https://aquasecurity.github.io/trivy/latest/getting-started/installation/"
        exit 1
    fi
    
    if ! command -v grype &> /dev/null; then
        echo -e "${RED}Error: Grype not found. Please install it first.${NC}"
        echo "Installation: https://github.com/anchore/grype#installation"
        exit 1
    fi
    
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}Error: Docker not found. Please install it first.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}✓ All dependencies found${NC}"
    echo ""
}

# Pull all images
pull_images() {
    echo -e "${YELLOW}Pulling container images...${NC}"
    for image in "${IMAGES[@]}"; do
        echo -e "${CYAN}Pulling $image...${NC}"
        docker pull "$image" || {
            echo -e "${RED}Failed to pull $image${NC}"
            continue
        }
    done
    echo ""
}

# Generate SBOM using Syft
generate_sbom() {
    local image=$1
    local safe_name=$(echo "$image" | tr '/:' '_')
    local sbom_file="$SBOM_DIR/sbom_${safe_name}.spdx.json"
    
    echo -e "${CYAN}Generating SBOM for $image using Syft...${NC}" >&2
    
    # Generate SBOM in SPDX JSON format
    syft "$image" \
        -o "$SBOM_FORMAT=$sbom_file" \
        -q 2>/dev/null || {
            echo -e "${RED}SBOM generation failed for $image${NC}" >&2
            return 1
        }
    
    if [[ -f "$sbom_file" ]]; then
        local package_count=$(jq '.packages | length' "$sbom_file" 2>/dev/null || echo "unknown")
        echo -e "${GREEN}✓ SBOM generated: $sbom_file (${package_count} packages)${NC}" >&2
        echo "$sbom_file" # Return the SBOM file path to stdout
    else
        echo -e "${RED}SBOM file not created${NC}" >&2
        return 1
    fi
}

# Run Trivy scan on SBOM
run_trivy_sbom_scan() {
    local image=$1
    local sbom_file=$2
    local safe_name=$(echo "$image" | tr '/:' '_')
    local output_file="$OUTPUT_DIR/trivy_sbom_${safe_name}.json"
    local summary_file="$OUTPUT_DIR/trivy_sbom_${safe_name}_summary.txt"
    
    echo -e "${CYAN}Running Trivy scan on SBOM for $image (ALL severities, including unfixed)...${NC}"
    echo -e "${CYAN}SBOM file path: $sbom_file${NC}" >&2
    
    # Verify SBOM file exists and is readable
    if [[ ! -f "$sbom_file" ]]; then
        echo -e "${RED}SBOM file does not exist: $sbom_file${NC}" >&2
        return 1
    fi
    
    if [[ ! -r "$sbom_file" ]]; then
        echo -e "${RED}SBOM file is not readable: $sbom_file${NC}" >&2
        return 1
    fi
    
    # Run detailed scan on SBOM - ALL severities, including unfixed
    trivy sbom \
        --format "$TRIVY_FORMAT" \
        --output "$output_file" \
        --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL \
        --ignore-unfixed=false \
        --quiet \
        "$sbom_file" 2>/dev/null || {
            echo -e "${RED}Trivy SBOM scan failed for $image${NC}" >&2
            echo -e "${YELLOW}Debug: Trying trivy sbom command manually...${NC}" >&2
            trivy sbom --format table "$sbom_file" 2>&1 | head -5 >&2
            return 1
        }
    
    # Generate summary
    trivy sbom \
        --format table \
        --output "$summary_file" \
        --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL \
        --ignore-unfixed=false \
        --quiet \
        "$sbom_file" 2>/dev/null
    
    # Count vulnerabilities by severity and fix status
    if [[ -f "$output_file" ]]; then
        local critical_count=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "$output_file" 2>/dev/null || echo "0")
        local high_count=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' "$output_file" 2>/dev/null || echo "0")
        local medium_count=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' "$output_file" 2>/dev/null || echo "0")
        local low_count=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' "$output_file" 2>/dev/null || echo "0")
        local unknown_count=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "UNKNOWN")] | length' "$output_file" 2>/dev/null || echo "0")
        local total_count=$(jq '[.Results[]?.Vulnerabilities[]?] | length' "$output_file" 2>/dev/null || echo "0")
        
        # Count unfixed vulnerabilities by severity
        local critical_unfixed=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL" and (.FixedVersion == "" or .FixedVersion == null))] | length' "$output_file" 2>/dev/null || echo "0")
        local high_unfixed=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" and (.FixedVersion == "" or .FixedVersion == null))] | length' "$output_file" 2>/dev/null || echo "0")
        local medium_unfixed=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM" and (.FixedVersion == "" or .FixedVersion == null))] | length' "$output_file" 2>/dev/null || echo "0")
        local low_unfixed=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW" and (.FixedVersion == "" or .FixedVersion == null))] | length' "$output_file" 2>/dev/null || echo "0")
        local unknown_unfixed=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "UNKNOWN" and (.FixedVersion == "" or .FixedVersion == null))] | length' "$output_file" 2>/dev/null || echo "0")
        
        echo -e "${GREEN}Trivy SBOM scan found: $total_count total vulnerabilities${NC}"
        echo -e "${GREEN}  Critical: $critical_count ($critical_unfixed unfixed), High: $high_count ($high_unfixed unfixed), Medium: $medium_count ($medium_unfixed unfixed), Low: $low_count ($low_unfixed unfixed), Unknown: $unknown_count ($unknown_unfixed unfixed)${NC}"
        echo "$total_count,$critical_count,$high_count,$medium_count,$low_count,$unknown_count,$critical_unfixed,$high_unfixed,$medium_unfixed,$low_unfixed,$unknown_unfixed" > "$OUTPUT_DIR/trivy_sbom_${safe_name}_counts.txt"
    else
        echo -e "${RED}Trivy SBOM output file not created${NC}"
        echo "0,0,0,0,0,0,0,0,0,0,0" > "$OUTPUT_DIR/trivy_sbom_${safe_name}_counts.txt"
    fi
}

# Run Grype scan on SBOM
run_grype_sbom_scan() {
    local image=$1
    local sbom_file=$2
    local safe_name=$(echo "$image" | tr '/:' '_')
    local output_file="$OUTPUT_DIR/grype_sbom_${safe_name}.json"
    local summary_file="$OUTPUT_DIR/grype_sbom_${safe_name}_summary.txt"
    
    echo -e "${CYAN}Running Grype scan on SBOM for $image (ALL severities, including unfixed)...${NC}"
    
    # Run detailed scan on SBOM - ALL severities, including unfixed
    grype "sbom:$sbom_file" \
        -o "$GRYPE_FORMAT" \
        --only-fixed=false \
        -q > "$output_file" 2>/dev/null || {
            echo -e "${RED}Grype SBOM scan failed for $image${NC}"
            return 1
        }
    
    # Generate summary
    grype "sbom:$sbom_file" \
        -o table \
        --only-fixed=false \
        -q > "$summary_file" 2>/dev/null
    
    # Count vulnerabilities by severity and fix status
    if [[ -f "$output_file" ]]; then
        local critical_count=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' "$output_file" 2>/dev/null || echo "0")
        local high_count=$(jq '[.matches[] | select(.vulnerability.severity == "High")] | length' "$output_file" 2>/dev/null || echo "0")
        local medium_count=$(jq '[.matches[] | select(.vulnerability.severity == "Medium")] | length' "$output_file" 2>/dev/null || echo "0")
        local low_count=$(jq '[.matches[] | select(.vulnerability.severity == "Low")] | length' "$output_file" 2>/dev/null || echo "0")
        local negligible_count=$(jq '[.matches[] | select(.vulnerability.severity == "Negligible")] | length' "$output_file" 2>/dev/null || echo "0")
        local unknown_count=$(jq '[.matches[] | select(.vulnerability.severity == "Unknown")] | length' "$output_file" 2>/dev/null || echo "0")
        local total_count=$(jq '[.matches[]] | length' "$output_file" 2>/dev/null || echo "0")
        
        # Debug: Let's see what fix-related fields exist in the first match
        if [ "$total_count" -gt 0 ]; then
            echo -e "${CYAN}Debug: Grype SBOM JSON structure sample for fix information:${NC}" >&2
            jq '.matches[0] | {id: .vulnerability.id, severity: .vulnerability.severity, fixedInVersions: .vulnerability.fixedInVersions, fix: .vulnerability.fix}' "$output_file" 2>/dev/null | head -10 >&2
        fi
        
        # Count unfixed vulnerabilities by severity
        local critical_unfixed=$(jq '[.matches[] | select(.vulnerability.severity == "Critical" and ((.vulnerability.fixedInVersions | length) == 0 or .vulnerability.fixedInVersions == null or .vulnerability.fixedInVersions == []))] | length' "$output_file" 2>/dev/null || echo "0")
        local high_unfixed=$(jq '[.matches[] | select(.vulnerability.severity == "High" and ((.vulnerability.fixedInVersions | length) == 0 or .vulnerability.fixedInVersions == null or .vulnerability.fixedInVersions == []))] | length' "$output_file" 2>/dev/null || echo "0")
        local medium_unfixed=$(jq '[.matches[] | select(.vulnerability.severity == "Medium" and ((.vulnerability.fixedInVersions | length) == 0 or .vulnerability.fixedInVersions == null or .vulnerability.fixedInVersions == []))] | length' "$output_file" 2>/dev/null || echo "0")
        local low_unfixed=$(jq '[.matches[] | select(.vulnerability.severity == "Low" and ((.vulnerability.fixedInVersions | length) == 0 or .vulnerability.fixedInVersions == null or .vulnerability.fixedInVersions == []))] | length' "$output_file" 2>/dev/null || echo "0")
        local negligible_unfixed=$(jq '[.matches[] | select(.vulnerability.severity == "Negligible" and ((.vulnerability.fixedInVersions | length) == 0 or .vulnerability.fixedInVersions == null or .vulnerability.fixedInVersions == []))] | length' "$output_file" 2>/dev/null || echo "0")
        local unknown_unfixed=$(jq '[.matches[] | select(.vulnerability.severity == "Unknown" and ((.vulnerability.fixedInVersions | length) == 0 or .vulnerability.fixedInVersions == null or .vulnerability.fixedInVersions == []))] | length' "$output_file" 2>/dev/null || echo "0")
        
        echo -e "${GREEN}Grype SBOM scan found: $total_count total vulnerabilities${NC}"
        echo -e "${GREEN}  Critical: $critical_count ($critical_unfixed unfixed), High: $high_count ($high_unfixed unfixed), Medium: $medium_count ($medium_unfixed unfixed), Low: $low_count ($low_unfixed unfixed), Negligible: $negligible_count ($negligible_unfixed unfixed), Unknown: $unknown_count ($unknown_unfixed unfixed)${NC}"
        echo "$total_count,$critical_count,$high_count,$medium_count,$low_count,$negligible_count,$unknown_count,$critical_unfixed,$high_unfixed,$medium_unfixed,$low_unfixed,$negligible_unfixed,$unknown_unfixed" > "$OUTPUT_DIR/grype_sbom_${safe_name}_counts.txt"
    else
        echo -e "${RED}Grype SBOM output file not created${NC}"
        echo "0,0,0,0,0,0,0,0,0,0,0,0,0" > "$OUTPUT_DIR/grype_sbom_${safe_name}_counts.txt"
    fi
}

# Generate comparison report
generate_report() {
    local report_file="$OUTPUT_DIR/sbom_comparison_report.md"
    
    echo -e "${YELLOW}Generating SBOM-based comparison report...${NC}"
    
    cat > "$report_file" << 'EOF'
# SBOM-Based Container Security Scanner Comparison Report

This report compares the vulnerability detection capabilities of Trivy and Grype when scanning SBOMs generated by Syft.
**All severities included (Critical, High, Medium, Low, Unknown/Negligible) including unfixed vulnerabilities.**

## SBOM-Based Scanning Approach

### Why SBOM-Based Scanning?
- **Consistent Inventory**: Both scanners work from the same software inventory (SBOM)
- **Standardized Format**: Uses SPDX JSON format for interoperability
- **Reproducible Results**: Same SBOM can be scanned multiple times consistently
- **Supply Chain Transparency**: Clear visibility into all components and dependencies

### Syft SBOM Generation:
- **Format**: SPDX JSON (Software Package Data Exchange)
- **Coverage**: Complete software inventory including OS packages, language dependencies
- **Accuracy**: Direct analysis of container layers and package manifests

## Key Differences Observed

### Trivy SBOM Scanning:
- **SBOM Support**: Native support for scanning SPDX, CycloneDX, and other SBOM formats
- **Database Integration**: Applies vulnerability databases to SBOM inventory
- **Fix Status**: Maintains ability to identify fixed vs unfixed vulnerabilities
- **Consistency**: Results may differ from direct image scanning due to different discovery methods

### Grype SBOM Scanning:
- **SBOM Support**: Excellent support for various SBOM formats
- **Comprehensive Matching**: Uses SBOM inventory for vulnerability matching
- **Database Coverage**: Applies extensive vulnerability database to SBOM components
- **Standardization**: SBOM-based approach often provides more consistent results

## Scan Results Summary

| Image | Scanner | Total | Critical | High | Medium | Low | Other | Crit(nofix) | High(nofix) | Med(nofix) | Low(nofix) | Other(nofix) | Notes |
|-------|---------|-------|----------|------|--------|-----|-------|-------------|-------------|------------|-----------|--------------|-------|
EOF

    # Add results for each image
    for image in "${IMAGES[@]}"; do
        local safe_name=$(echo "$image" | tr '/:' '_')
        local display_name=$(get_display_name "$image")
        
        # Trivy SBOM results
        if [[ -f "$OUTPUT_DIR/trivy_sbom_${safe_name}_counts.txt" ]]; then
            local trivy_data=$(cat "$OUTPUT_DIR/trivy_sbom_${safe_name}_counts.txt")
            IFS=',' read -r total_t crit_t high_t med_t low_t unk_t crit_uf_t high_uf_t med_uf_t low_uf_t unk_uf_t <<< "$trivy_data"
            
            # Format unfixed columns for markdown - only show if > 0
            local crit_nofix_md=$([ "$crit_uf_t" -gt 0 ] && echo "$crit_uf_t" || echo "-")
            local high_nofix_md=$([ "$high_uf_t" -gt 0 ] && echo "$high_uf_t" || echo "-")
            local med_nofix_md=$([ "$med_uf_t" -gt 0 ] && echo "$med_uf_t" || echo "-")
            local low_nofix_md=$([ "$low_uf_t" -gt 0 ] && echo "$low_uf_t" || echo "-")
            local unk_nofix_md=$([ "$unk_uf_t" -gt 0 ] && echo "$unk_uf_t" || echo "-")
            
            echo "| $display_name | Trivy | $total_t | $crit_t | $high_t | $med_t | $low_t | $unk_t | $crit_nofix_md | $high_nofix_md | $med_nofix_md | $low_nofix_md | $unk_nofix_md | SBOM-based scan |" >> "$report_file"
        fi
        
        # Grype SBOM results  
        if [[ -f "$OUTPUT_DIR/grype_sbom_${safe_name}_counts.txt" ]]; then
            local grype_data=$(cat "$OUTPUT_DIR/grype_sbom_${safe_name}_counts.txt")
            IFS=',' read -r total_g crit_g high_g med_g low_g neg_g unk_g crit_uf_g high_uf_g med_uf_g low_uf_g neg_uf_g unk_uf_g <<< "$grype_data"
            local other_g=$((neg_g + unk_g))
            local other_uf_g=$((neg_uf_g + unk_uf_g))
            
            # Format unfixed columns for markdown - only show if > 0
            local crit_nofix_md=$([ "$crit_uf_g" -gt 0 ] && echo "$crit_uf_g" || echo "-")
            local high_nofix_md=$([ "$high_uf_g" -gt 0 ] && echo "$high_uf_g" || echo "-")
            local med_nofix_md=$([ "$med_uf_g" -gt 0 ] && echo "$med_uf_g" || echo "-")
            local low_nofix_md=$([ "$low_uf_g" -gt 0 ] && echo "$low_uf_g" || echo "-")
            local other_nofix_md=$([ "$other_uf_g" -gt 0 ] && echo "$other_uf_g" || echo "-")
            
            echo "| $display_name | Grype | $total_g | $crit_g | $high_g | $med_g | $low_g | $other_g | $crit_nofix_md | $high_nofix_md | $med_nofix_md | $low_nofix_md | $other_nofix_md | SBOM-based scan |" >> "$report_file"
        fi
    done
    
    cat >> "$report_file" << 'EOF'

## Analysis: SBOM vs Direct Image Scanning

### Expected Differences from Direct Image Scanning:
1. **More Consistent Results**: SBOM provides standardized inventory that both scanners analyze
2. **Potential Coverage Differences**: SBOM may capture different packages than direct image analysis
3. **Reproducibility**: Same SBOM always produces same results (assuming same scanner version/database)
4. **Supply Chain Focus**: SBOM approach emphasizes complete software inventory management

### SBOM-Based Scanning Benefits:
- **Standardization**: Common inventory format reduces scanner-specific discovery differences
- **Auditability**: Clear record of what was scanned and when
- **Integration**: SBOMs can be stored, shared, and scanned across different tools/times
- **Compliance**: Many regulations now require SBOM generation and maintenance
- **CI/CD Integration**: Generate SBOM once, scan multiple times with different tools

### Key Insights:
- **Scanner Convergence**: SBOM-based scanning often produces more similar results between scanners
- **Inventory Accuracy**: Quality of SBOM directly impacts vulnerability detection accuracy
- **Database Differences**: Scanners still use different vulnerability databases and matching logic
- **Fix Status**: Both scanners maintain ability to identify remediation status when scanning SBOMs

### Recommendations for SBOM-Based Security:
1. **Generate High-Quality SBOMs**: Use tools like Syft for comprehensive software inventory
2. **Multi-Scanner Analysis**: Different scanners may match vulnerabilities differently even with same SBOM
3. **Regular Updates**: Update both SBOMs and scanner databases regularly
4. **Format Standardization**: Use widely-supported formats like SPDX for interoperability
5. **Integration Strategy**: Incorporate SBOM generation and scanning into CI/CD pipelines
6. **Compliance Readiness**: SBOMs help meet emerging regulatory requirements

## Technical Details:
- **SBOM Format**: SPDX JSON generated by Syft
- **Trivy Configuration**: `trivy sbom --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL --ignore-unfixed=false`
- **Grype Configuration**: `grype sbom:file --only-fixed=false`
- **Focus**: Complete vulnerability landscape via standardized software inventory

## Files Generated:
- `sbom_scanner_results/[timestamp]/`: Timestamped results directory
- `syft-sboms/`: Directory in current folder containing all generated SBOMs
- `*_sbom_summary.txt`: Human-readable summaries of SBOM-based scans
- `*.json`: Detailed machine-readable results from SBOM scanning
- `sbom_comparison_report.md`: This comprehensive report
EOF

    echo -e "${GREEN}SBOM-based report generated: $report_file${NC}"
}

# Print results table
print_results_table() {
    echo ""
    echo -e "${BLUE}=== SBOM-BASED SCAN RESULTS (ALL SEVERITIES + UNFIXED) ===${NC}"
    printf "${YELLOW}%-15s %-8s %-6s %-6s %-6s %-6s %-6s %-6s %-12s %-12s %-12s %-12s %-12s${NC}\n" "Image" "Scanner" "Total" "Crit" "High" "Med" "Low" "Other" "Crit(nofix)" "High(nofix)" "Med(nofix)" "Low(nofix)" "Other(nofix)"
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    
    for image in "${IMAGES[@]}"; do
        local safe_name=$(echo "$image" | tr '/:' '_')
        local display_name=$(get_display_name "$image")
        
        # Trivy SBOM results
        if [[ -f "$OUTPUT_DIR/trivy_sbom_${safe_name}_counts.txt" ]]; then
            local trivy_data=$(cat "$OUTPUT_DIR/trivy_sbom_${safe_name}_counts.txt")
            IFS=',' read -r total_t crit_t high_t med_t low_t unk_t crit_uf_t high_uf_t med_uf_t low_uf_t unk_uf_t <<< "$trivy_data"
            
            # Format unfixed columns - only show if > 0
            local crit_nofix_display=$([ "$crit_uf_t" -gt 0 ] && echo "$crit_uf_t" || echo "-")
            local high_nofix_display=$([ "$high_uf_t" -gt 0 ] && echo "$high_uf_t" || echo "-")
            local med_nofix_display=$([ "$med_uf_t" -gt 0 ] && echo "$med_uf_t" || echo "-")
            local low_nofix_display=$([ "$low_uf_t" -gt 0 ] && echo "$low_uf_t" || echo "-")
            local unk_nofix_display=$([ "$unk_uf_t" -gt 0 ] && echo "$unk_uf_t" || echo "-")
            
            printf "%-15s ${CYAN}%-8s${NC} %-6s %-6s %-6s %-6s %-6s %-6s %-12s %-12s %-12s %-12s %-12s\n" \
                "$display_name" "Trivy" "$total_t" "$crit_t" "$high_t" "$med_t" "$low_t" "$unk_t" \
                "$crit_nofix_display" "$high_nofix_display" "$med_nofix_display" "$low_nofix_display" "$unk_nofix_display"
        fi
        
        # Grype SBOM results
        if [[ -f "$OUTPUT_DIR/grype_sbom_${safe_name}_counts.txt" ]]; then
            local grype_data=$(cat "$OUTPUT_DIR/grype_sbom_${safe_name}_counts.txt")
            IFS=',' read -r total_g crit_g high_g med_g low_g neg_g unk_g crit_uf_g high_uf_g med_uf_g low_uf_g neg_uf_g unk_uf_g <<< "$grype_data"
            local other_g=$((neg_g + unk_g))
            local other_uf_g=$((neg_uf_g + unk_uf_g))
            
            # Format unfixed columns - only show if > 0
            local crit_nofix_display=$([ "$crit_uf_g" -gt 0 ] && echo "$crit_uf_g" || echo "-")
            local high_nofix_display=$([ "$high_uf_g" -gt 0 ] && echo "$high_uf_g" || echo "-")
            local med_nofix_display=$([ "$med_uf_g" -gt 0 ] && echo "$med_uf_g" || echo "-")
            local low_nofix_display=$([ "$low_uf_g" -gt 0 ] && echo "$low_uf_g" || echo "-")
            local other_nofix_display=$([ "$other_uf_g" -gt 0 ] && echo "$other_uf_g" || echo "-")
            
            printf "%-15s ${PURPLE}%-8s${NC} %-6s %-6s %-6s %-6s %-6s %-6s %-12s %-12s %-12s %-12s %-12s\n" \
                "$display_name" "Grype" "$total_g" "$crit_g" "$high_g" "$med_g" "$low_g" "$other_g" \
                "$crit_nofix_display" "$high_nofix_display" "$med_nofix_display" "$low_nofix_display" "$other_nofix_display"
        fi
        echo ""
    done
    
    echo -e "${YELLOW}Note: Columns with '-' indicate no unfixed vulnerabilities of that severity${NC}"
}

# Main execution
main() {
    # Parse command line arguments first
    parse_arguments "$@"
    
    echo -e "${BLUE}Starting SBOM-based container security scanner comparison...${NC}"
    echo ""
    
    check_dependencies
    setup_sbom_directory
    
    # Create output directory structure after argument parsing
    mkdir -p "$OUTPUT_BASE_DIR"
    mkdir -p "$OUTPUT_DIR"
    echo -e "${CYAN}Created results directory: $OUTPUT_DIR${NC}"
    echo ""
    
    if [[ "$USE_EXISTING" == true ]]; then
        # Use existing SBOMs - skip image pulling and SBOM generation
        echo -e "${YELLOW}=== FAST MODE: USING EXISTING SBOMs ===${NC}"
        find_existing_sboms
        
        # Record start time for speed demonstration
        start_time=$(date +%s)
    else
        # Standard mode - pull images and generate SBOMs
        pull_images
        
        # Phase 1: Generate all SBOMs first
        echo -e "${YELLOW}=== PHASE 1: GENERATING SBOMs FOR ALL IMAGES ===${NC}"
        declare -A sbom_files
        for image in "${IMAGES[@]}"; do
            echo -e "${YELLOW}Generating SBOM for $image${NC}"
            sbom_file=$(generate_sbom "$image")
            if [[ $? -eq 0 && -n "$sbom_file" ]]; then
                sbom_files["$image"]="$sbom_file"
                echo -e "${GREEN}✓ SBOM ready for $image${NC}"
            else
                echo -e "${RED}✗ SBOM generation failed for $image${NC}"
            fi
            echo ""
        done
        
        # Record start time after SBOM generation for fair comparison
        start_time=$(date +%s)
    fi
    
    # Phase 2: Scan all SBOMs with both scanners
    echo -e "${YELLOW}=== PHASE 2: SCANNING ALL SBOMs WITH TRIVY AND GRYPE ===${NC}"
    echo -e "${CYAN}Starting timed scanning phase...${NC}"
    
    for image in "${IMAGES[@]}"; do
        if [[ -n "${sbom_files[$image]}" ]]; then
            echo -e "${YELLOW}Scanning SBOM for $image${NC}"
            echo -e "${CYAN}SBOM file: ${sbom_files[$image]}${NC}"
            
            # Scan with both scanners
            run_trivy_sbom_scan "$image" "${sbom_files[$image]}"
            run_grype_sbom_scan "$image" "${sbom_files[$image]}"
            echo ""
        else
            echo -e "${RED}Skipping $image - no SBOM available${NC}"
            echo ""
        fi
    done
    
    # Calculate scanning time
    end_time=$(date +%s)
    scan_duration=$((end_time - start_time))
    
    # Phase 3: Generate reports
    echo -e "${YELLOW}=== PHASE 3: GENERATING REPORTS ===${NC}"
    generate_report
    print_results_table
    
    echo -e "${GREEN}=== SBOM-BASED ANALYSIS COMPLETE ===${NC}"
    echo -e "${CYAN}Results base directory: $OUTPUT_BASE_DIR${NC}"
    echo -e "${CYAN}Current run results: $OUTPUT_DIR${NC}"
    echo -e "${CYAN}SBOMs saved in: $SBOM_DIR (current directory)${NC}"
    echo -e "${CYAN}Comparison report: $OUTPUT_DIR/sbom_comparison_report.md${NC}"
    echo ""
    
    # Show timing results
    if [[ "$USE_EXISTING" == true ]]; then
        echo -e "${GREEN}⚡ FAST SCANNING PERFORMANCE ⚡${NC}"
        echo -e "${YELLOW}Scanning time (existing SBOMs): ${scan_duration} seconds${NC}"
        echo -e "${YELLOW}Benefits: No image pulling, no SBOM generation - just pure vulnerability scanning!${NC}"
    else
        echo -e "${YELLOW}📊 PERFORMANCE METRICS 📊${NC}"
        echo -e "${YELLOW}Scanning time (after SBOM generation): ${scan_duration} seconds${NC}"
        echo -e "${YELLOW}Next run: Use --use-existing flag for fast scanning demonstration${NC}"
    fi
    echo ""
    
    echo -e "${YELLOW}Generated SBOMs:${NC}"
    for image in "${IMAGES[@]}"; do
        if [[ -n "${sbom_files[$image]}" ]]; then
            local display_name=$(get_display_name "$image")
            echo -e "${GREEN}✓ $display_name: ${sbom_files[$image]}${NC}"
        else
            local display_name=$(get_display_name "$image")
            echo -e "${RED}✗ $display_name: SBOM generation failed${NC}"
        fi
    done
    echo ""
    echo -e "${YELLOW}Key Insights:${NC}"
    echo -e "${YELLOW}• SBOM-Based Scanning: More consistent results using standardized software inventory${NC}"
    echo -e "${YELLOW}• Scanner != Scanner: Even with same SBOM, different vulnerability databases and matching${NC}"
    echo -e "${YELLOW}• ALL vulnerabilities included: Critical, High, Medium, Low, Unknown/Negligible${NC}"
    echo -e "${YELLOW}• Unfixed vulnerabilities tracked for complete risk assessment${NC}"
    echo -e "${YELLOW}• Supply Chain Transparency: SBOMs provide complete component visibility${NC}"
    echo -e "${YELLOW}• Compliance Ready: SBOM generation supports regulatory requirements${NC}"
    if [[ "$USE_EXISTING" == true ]]; then
        echo -e "${YELLOW}• Speed Advantage: SBOM-based scanning is much faster than direct image scanning${NC}"
    fi
}

# Handle script interruption
trap 'echo -e "\n${RED}Script interrupted${NC}"; exit 1' INT

# Run main function with all arguments
main "$@"
